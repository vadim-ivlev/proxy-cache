# Директива устанавливает путь и конфигурации кэша.
# levels=1:2 - двухуровневая иерархия каталогов хранения данных
# keys_zone=my_cache:10m - имя и размер зоны ключей в оперативной памяти 10m ~ 80 000 ключей
# max_size=10g - максимольный размер памяти на диске отведенной под кэш
# inactive=60m - после 60 не обращения к элементу кэша мин удалять его с диска
# use_temp_path=off; - не использовать временные файлы для записи в кэш
proxy_cache_path /cache levels=1:2 keys_zone=my_cache:10m max_size=10g 
                 inactive=60m use_temp_path=off;

server {
    listen 5555;

    # директива активирует кэш и задаёт зону разделяемой памяти, используемой для кэширования.
    proxy_cache my_cache;

    # Разрешает ревалидацию просроченных элементов кэша при помощи 
    # условных запросов с полями заголовка “If-Modified-Since” и “If-None-Match”.
    # Механизм принудительного обновления кэша.
    proxy_cache_revalidate on;

    # Задаёт число запросов, после которого ответ будет закэширован.
    proxy_cache_min_uses 1;

    # Определяет, в каких случаях можно использовать устаревший закэшированный ответ.
    proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;

    # Позволяет запустить фоновый подзапрос для обновления просроченного элемента кэша, 
    # в то время как клиенту возвращается устаревший закэшированный ответ.
    # Использование устаревшего закэшированного ответа в момент его обновления должно быть разрешено
    # в HTTP заголовке "Cache-Control: max-age=600, stale-while-revalidate=30"
    proxy_cache_background_update on;

    # Если включено, одновременно только одному запросу будет позволено заполнить новый элемент кэша.
    # Остальные запросы этого же элемента будут либо ожидать появления ответа в кэше, 
    # либо освобождения блокировки этого элемента, в течение времени, 
    # заданного директивой proxy_cache_lock_timeout.       
    proxy_cache_lock on;

    # Задаёт таймаут для proxy_cache_lock. По истечении указанного времени 
    # запрос будет передан на проксируемый сервер, однако ответ не будет закэширован.
    # proxy_cache_lock_timeout 5s;

    # Если последний запрос, переданный на проксируемый сервер 
    # для заполнения нового элемента кэша, не завершился за указанное время, 
    # на проксируемый сервер может быть передан ещё один запрос.
    # proxy_cache_lock_age 5s;

    # Добавляет X-Cache-Status к заголовку ответа сервера. 
    # Позволяет анализировать состояние кэширования страницы
    add_header X-Cache-Status $upstream_cache_status;


    # Игнорирует Cache-Control заголовок, так же можно пригнорировать Set-Cookie
    proxy_ignore_headers Cache-Control;

    # Обновить кэш если получен заголовок HTTP "clear-cache"
    # curl http://abcdomain.com/mypage.html -s -I -H "clear-cache:true"
    proxy_cache_bypass $http_clear_cache;



    location / {
        # Задаёт время кэширования для разных кодов ответа. По умолчанию 200, 301 и 302
        proxy_cache_valid 200 302 10s;

        # Задаёт протокол “http” или “https” и адрес проксируемого сервера, 
        # а также необязательный URI,на который должен отображаться location. 
        proxy_pass http://py:8080;
    }

    location /hello {
        proxy_cache_valid 5s;
        proxy_pass http://py:8080/hello;
    }



}
